<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Routine name="importGlobal" type="MAC" languagemode="0"><![CDATA[
#include Globs
#include %occStatus
#include %occMessages
Start(link)
	set timer = $ZHOROLOG
	set file = ##class(%Stream.FileCharacter).%New()
	set file.Filename=link
	set buf=""
	if (link="")
	{
		set sock = ##class(%IO.ServerSocket).%New() 
  		set sock.TranslationTable="UTF8"
  		do sock.Open("7031",1,.sc)
  		if $$$ISOK(sc) {

    	do sock.Listen()
    	do	{	
    		//if ('(sock.IsConnected)) {q}
    		set s=sock.ReadAny($$$BLOCKSIZE, 3)
    		set s=##class(Globals.Utils).decode(s)
    		w "Got Data @ "_$ztime($ZHOROLOG), ",still have ",$s," memory",!
    		set buf=(buf_s) //
    		//w s, !
    		while ($f(buf,$$$NL)>0) 
    			{
	    			if (buf=$$$NL) {q}
	    			do ##class(Globals.Utils).executeString($e(buf,1,$f(buf,$$$NL)-3))
	    			set buf=$e(buf,$f(buf,$$$NL),*)
	    				
	    		}
	    	do sock.Write("111")
    		}
    		while(s'="")

    		do sock.Close()
	} else { w "CANT CREATE SOCK",!}
	}
	else 
		{
		while ('file.AtEnd) {
			set s = file.Read($$$BLOCKSIZE)
			
			set s=##class(Globals.Utils).decode(s)
    		set buf=buf_s
    		while ($f(buf,$$$NL)>0) 
    			{
	    			do ##class(Globals.Utils).executeString($e(buf,1,$f(buf,$$$NL)-3))
	    			set buf=$e(buf,$f(buf,$$$NL),*)	    		
	    		}
			}
		}
	
	w "Successfully imported!"
]]></Routine>
</Export>
