<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Globals.Utils">
<IncludeCode>Globs</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63011,53656.67001</TimeCreated>

<Method name="ChunkAndSend">
<ClassMethod>1</ClassMethod>
<FormalSpec>queryary:%String,buffer:%String,file:%Stream.FileCharacter</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
		SET tempstr=""
		set blockWritten=0
		set i=1
		for  
			{
		  	set tempstr=$e(queryary,i,i+($$$BLOCKSIZE /$$$SYMBOLSPERCHAR)-$l(buffer)-1)
		  	q:($l(tempstr)<($$$BLOCKSIZE/$$$SYMBOLSPERCHAR - $l(buffer))) 	//выход если можем записать в буффер
		  	set i=i+($$$BLOCKSIZE /$$$SYMBOLSPERCHAR)-$l(buffer)
		  	if (buffer'="") {set tempstr=buffer_tempstr, buffer=""}
		  	do ##class(Globals.Utils).EncodeAndSave(tempstr,file)
		  	set blockWritten = blockWritten+1
	  		}
	  set buffer=buffer_tempstr
	  q blockWritten
]]></Implementation>
</Method>

<Method name="EncodeAndSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>inpt:%String,file:%Stream.FileCharacter</FormalSpec>
<Implementation><![CDATA[
	set buf=""
	set i=1
	for  {
	set extr=$extract(inpt,i)
	q:(extr="")
	set buf=buf_$ZHEX($A($ZConvert(extr,"O","CP1251")))
	set i=i+1
	}
	do file.Write(buf)
]]></Implementation>
</Method>

<Method name="DecodeAndSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>inpt:%String,file:%Stream.FileCharacter</FormalSpec>
<Implementation><![CDATA[
	set buf=""
	set i=1
	for  {
	set extr=$extract(inpt,i,i+1)
	q:(extr="")
	if (extr="DA") { set buf = buf_$$$NL} // BAD IDEA - new line execution
	else{
	set buf=buf_$ZConvert($c($zh(extr)),"I","CP1251") }
	set i=i+2
	}
	do file.Write(buf)
]]></Implementation>
</Method>

<Method name="listToString">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set retVal="$lb(", nextElem="",ptr=0
	
	if ($LISTVALID(str)&&(str'="")) {
		while ($LISTNEXT(str,ptr,nextElem)){
			if ($LISTVALID(nextElem)&&(nextElem'="")) {
				set retVal=retVal_##class(Globals.Utils).listToString(nextElem)_","
			}
			else{
				set retVal=retVal_""""_nextElem_""""_","
			}
		}
				set retVal=$e(retVal,1,*-1)
				}
	else {
		set retVal=""""_str_""""
	}
	q retVal_")"
]]></Implementation>
</Method>

<Method name="executeString">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<Implementation><![CDATA[
	set globalName="",globalVal="",globalIndex=""
	set globalName = $e(str,2,($f(str,"(")-2)) 
	set globalVal = $e(str,($f(str,"||")), *)
	if (($f(str,"||")>$f(str,"(")) &&  ($f(str,"(")>0)){
	set globalIndex = $e(str,$f(str,"("),($f(str,"||")-4))
	set @("^"_globalName_"("_globalIndex_")") =##class(Globals.Utils).lbCreate(globalVal)
	}
	else {
		set globalName = $e(str,2,($f(str,"||")-3)) 
		set @("^"_globalName) =##class(Globals.Utils).lbCreate(globalVal)
	
	}
]]></Implementation>
</Method>

<Method name="lbCreate">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET src(0)=3
  	SET src(1)="TestB "
  	SET src(2)=" set ^str2="_str
  	SET src(3)=" QUIT"
  	SET stat=$COMPILE(src,0,errs,,,,"TestB")
    d ^TestB
    q ^str2
]]></Implementation>
</Method>

<Method name="executeNode">
<ClassMethod>1</ClassMethod>
<FormalSpec>queryarr:%String,buffer:%String</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set blockWritten=0
	 if ($LISTVALID(@queryarr)&&(@queryarr'="")){
		        set blockWritten =  blockWritten + ##class(Globals.Utils).ChunkAndSend(queryary_"||"_##class(Globals.Utils).listToString(@queryary)_$$$NL,.buffer,.file)
       	}
       	else {
	       set blockWritten =  blockWritten + ##class(Globals.Utils).ChunkAndSend(queryary_"||"_""""_@queryary_""""_$$$NL,.buffer,.file)
       	}
      q blockWritten
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Globals.UtilsD</DataLocation>
<DefaultData>UtilsDefaultData</DefaultData>
<IdLocation>^Globals.UtilsD</IdLocation>
<IndexLocation>^Globals.UtilsI</IndexLocation>
<StreamLocation>^Globals.UtilsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="UtilsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
