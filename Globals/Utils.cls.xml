<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Globals.Utils">
<IncludeCode>Globs</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63011,53656.67001</TimeCreated>

<Method name="ChunkAndSend">
<Description><![CDATA[

Chunk - > Hex -> Save to buf or send to file/socket
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>queryary:%String,buffer:%String,file:%String,sf:%Boolean</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
		SET tempstr=""
		set blockWritten=0
		set i=1
		for  
			{
		  	set tempstr=$e(queryary,i,i+($$$BLOCKSIZE)-$l(buffer)-$$$SYSBYTES-1)
		  	q:($l(tempstr)<($$$BLOCKSIZE - $l(buffer)-$$$SYSBYTES)) 	//выход если можем записать в буффер
		  	set i=i+($$$BLOCKSIZE)-$l(buffer)-$$$SYSBYTES
		  	if (buffer'="") {set tempstr=buffer_tempstr, buffer=""}
		  	//set tempstr2=..Encode(tempstr)
		  	set length=..ValueToWord($l(tempstr))
		  	set ll=..Encode(length)
		  	if (sf) { do file.Write(ll, $$$YES) }
		  	else {do file.Write(ll) }
			if (sf) do file.ReadAny(3)
			
			if (sf) { do file.Write(tempstr, $$$YES) }
		  	else { do file.Write(tempstr)}
			set blockWritten = (blockWritten+1) 
		  	if (sf) do file.ReadAny(3)
	  		}
	  set buffer=buffer_tempstr
	  q blockWritten
]]></Implementation>
</Method>

<Method name="toFour">
<ClassMethod>1</ClassMethod>
<FormalSpec>t:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (t="") return "0000" //Можно ли?
	if ($l(t) =1) {s t="000"_t}
	elseif ($l(t) =2) {s t="00"_t}
	elseif ($l(t) =3) {s t="0"_t}
	q t
]]></Implementation>
</Method>

<Method name="Encode">
<ClassMethod>1</ClassMethod>
<FormalSpec>inpt:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set buf=""
	set i=1
	for  {
	set extr=$extract(inpt,i)
	q:(extr="")
	set t=$ZHEX($A($ZConvert(extr,"O","CP1251")))
	set t=..toFour(t)
	set buf=buf_t
	set i=i+1
	}
	q buf
]]></Implementation>
</Method>

<Method name="decode">
<ClassMethod>1</ClassMethod>
<FormalSpec>inpt:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set buf=""
	set i=1
	for  {
	set extr=$extract(inpt,i,i+3)
	q:(extr="")
	set buf=buf_$c($a($zconvert($c($zh(extr)),"i","CP1251")))
	set i=i+4
	}
	q buf
]]></Implementation>
</Method>

<Method name="listToString">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set retVal="$lb(", nextElem="",ptr=0
	
	if ($LISTVALID($get(str))&&($get(str)'="")) {
		try{
		while ($LISTNEXT($get(str),ptr,nextElem)){
			if ($LISTVALID($get(nextElem))&&($get(nextElem)'="")) {
				set ttTT =..listToString($get(nextElem))
				set retVal=retVal_$get(ttTT)_","
			}
			else{
				set retVal=retVal_""""_..makeSafeStr($get(nextElem))_""""_","
			}
		}
			}catch {w !,"Str=",str}
				set retVal=$e(retVal,1,*-1)
				}
	else {
		set retVal=""""_$get(str)_""""
	}
	q retVal_")"
]]></Implementation>
</Method>

<Method name="executeString">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,curGl:%String</FormalSpec>
<Implementation><![CDATA[
	set str=..decode(str)
	set dType=$e(str,1)
	if (dType="") {W !,"ERR NULL dType",! h 3}
	set str=$e(str,2,*)
	
	set globalName="",globalVal="",globalIndex=""
	set globalName = $e(str,2,($f(str,"(")-2)) 
	set globalVal = $e(str,($f(str,"||")), *)
	if (($f(str,"||")>$f(str,"(")) &&  ($f(str,"(")>0)){
		
		//У узла есть индекс
		set globalIndex = $e(str,$f(str,"("),($f(str,"||")-4))
	
		if (dType'="b")
		{
			if (dType="l")
			{
				set @("^"_globalName_"("_globalIndex_")") =..lbCreate(globalVal)
			}
			else {set @("^"_globalName_"("_globalIndex_")") =globalVal}
	
		}
		else {
			set bitStr=""
			for i=1:1:$l(globalVal) {set $bit(bitStr,i)=$e(globalVal,i)}
			set @("^"_globalName_"("_globalIndex_")") =bitStr
		}
	}
	else {
		//У узла нет индекса - ^name=val
		set globalName = $e(str,2,($f(str,"||")-3)) 
		if (dType'="b")
		{
			if (dType="l"){set @("^"_globalName) =..lbCreate(globalVal)}
			else{set @("^"_globalName) =globalVal}
		}
		else {
			set bitStr=""
			for i=1:1:$l(globalVal) {set $bit(bitStr,i)=$e(globalVal,i)}
			set @("^"_globalName) =bitStr
		}
	
	}
	
	if ($get(curGl)'=$get(globalName)) 
	{
		 w !,"Processing ^",$get(globalName),!
		 set curGl=$get(globalName)
		 }
]]></Implementation>
</Method>

<Method name="lbCreate">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET src(0)=3
  	SET src(1)="TestB "
  	SET src(2)=" set ^str2="_str
  	SET src(3)=" QUIT"
  	SET stat=$COMPILE(src,0,errs,,,,"TestB")
    d ^TestB
    q ^str2
]]></Implementation>
</Method>

<Method name="nodeToStr">
<ClassMethod>1</ClassMethod>
<FormalSpec>queryarr:%String,buffer:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//set tempstr=""
	set blockWritten=0
	 if ($LISTVALID(@queryarr)&&(@queryarr'="")){
		 		//Углубляемся в список
		 		set value=..listToString(@queryarr)
		 		set tempstr=..Encode("l"_queryarr_"||"_value)_$$$NL
		       q tempstr
       	}
       	else {
	       try {
		       //БИТОВАЯ СТРОКА?
		       if (@queryarr="") throw
		       set bitString="" 
	       		for i=1:1:$bitcount(@queryarr) {
		       		set bitString = bitString_($bit(@queryarr,i)_"")
	       		} 
	       		set tempstr=..Encode("b"_queryarr_"||"_bitString)_$$$NL
	       		}
	       catch {
		       //Оставшийся вариант - обычное значение
		       
	       set tempstr=..Encode("r"_queryarr_"||"_(@queryarr))_$$$NL //здесь """"
	       }
	       q tempstr
	        }
]]></Implementation>
</Method>

<Method name="Compare">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set g1=$Name(^PROJECT)
	Set g2=$Name(^|"TEST"|PROJECT)
	Set res=$Name(^XXX)
	Set (cnt1,cnt2)=0
	Kill @res
	Set i=""
	For  {
		Set i=$Order(@g1@(i))
		If i="" Quit
		If '$Data(@g2@(i)) Set @res@(1,i)="",cnt1=cnt1+1
	}
	Set i=""
	For  {
		Set i=$Order(@g2@(i))
		If i="" Quit
		If $Data(@g1@(i))'=$data(@g2@(i)) Set @res@(2,i,1)=$get(@g1@(i)), @res@(2,i,2)=$get(@g2@(i)),cnt2=cnt2+1
	}
	Write cnt1,!,cnt2
]]></Implementation>
</Method>

<Method name="ValueToWord">
<ClassMethod>1</ClassMethod>
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[
 If (pValue<0)||(pValue>65535) Set pValue=0
 Quit $Extract($ZLChar(pValue),1,2)
]]></Implementation>
</Method>

<Method name="WordToValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[
 If $Length(pValue)'=2 Quit 0
 Quit $ZLASCII(pValue_$Char(0,0))
]]></Implementation>
</Method>

<Method name="NameSpaceGlobalList">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace,pMask,pSystemGlobals</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	set out=$lb()
	set tick=0
 	Set rset=##class(%ResultSet).%New("%SYS.GlobalQuery:NameSpaceList")
 	Set sc=rset.Execute(pNameSpace,pMask,pSystemGlobals)
 	While (rset.Next()) {
	
	set tick=tick+1
  	Set glb=$Piece(rset.GetData(1),"(",1)
  	If ('pSystemGlobals)&&($Extract(glb,1,$Length("Ens."))="Ens.") Continue
  	If (glb'="") {set $list(out,tick)=glb}
 	}
 if ($listdata(out,1))
  {quit out} 
  else {quit ""}
]]></Implementation>
</Method>

<Method name="makeSafeStr">
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//На входе - строка абаыащы"аыги"dada
	q $replace(str,"""","""""")
	//На выходе - безопасная строка
]]></Implementation>
</Method>
</Class>
</Export>
